1. Что такое контейнер в библиотеке STL?

Контейнер в STL — это объект, который хранит коллекцию элементов (объектов) и предоставляет методы для работы с этими элементами. Контейнеры могут быть последовательными (например, vector, list, array), ассоциативными (например, map, set) или адаптерами контейнеров (например, stack, queue).

2. Что такое итератор в библиотеке STL?

Итератор в STL — это объект, который действует как указатель на элемент контейнера. Он позволяет перебирать элементы контейнера и манипулировать ими, независимо от структуры самого контейнера. Итераторы можно инкрементировать, декрементировать и разыменовывать для доступа к элементам.

3. Что такое алгоритм в библиотеке STL?

Алгоритм в STL — это шаблонная функция, которая выполняет стандартные операции над элементами контейнеров, такие как сортировка, поиск, копирование, удаление и другие. Алгоритмы могут работать с диапазонами элементов контейнеров с использованием итераторов.

4. Какие виды итераторов существуют в библиотеке STL?

В STL существует несколько типов итераторов:
- Итератор произвольного доступа (random access iterator) — поддерживает произвольный доступ к элементам (например, в vector и array).
- Двунаправленный итератор (bidirectional iterator) — позволяет перемещаться в обоих направлениях (например, в list).
- Однонаправленный итератор (forward iterator) — позволяет перемещаться только вперед.
- Входной итератор (input iterator) — предназначен для чтения данных из контейнера.
- Выходной итератор (output iterator) — используется для записи данных в контейнер.

5. Что представляет собой предикат в библиотеке STL?

Предикат в STL — это функция или функциональный объект, который возвращает булевое значение (истина или ложь). Предикаты используются в алгоритмах для проверки условий (например, для фильтрации элементов). Существуют унарные предикаты (с одним аргументом) и бинарные предикаты (с двумя аргументами).

6. Что собой представляет контейнер вектор (vector) в STL C++?

vector — это динамический массив, который может изменять свой размер во время выполнения программы. Он обеспечивает произвольный доступ к элементам по индексу и поддерживает операции вставки и удаления элементов в конце. vector автоматически управляет выделением и освобождением памяти.

7. Что собой представляет контейнер список (list) в STL C++?

list — это двусвязный список, который позволяет эффективно вставлять и удалять элементы в любом месте контейнера. В отличие от vector, list не поддерживает произвольный доступ по индексу, доступ к элементам осуществляется только через итераторы.

8. Что собой представляет контейнер массив (array) в STL C++?

array — это контейнер фиксированного размера, который представляет собой обобщённый аналог статического массива в C++. Размер массива задаётся при его создании и не может изменяться. array обеспечивает быстрый доступ к элементам по индексу.

9. В чем различие между контейнерами list, vector, array?

- vector — динамический массив, который может изменять размер и предоставляет быстрый произвольный доступ к элементам по индексу. Хорошо подходит для работы с динамическими данными.
- list — двусвязный список, в котором элементы связаны ссылками друг на друга. Поддерживает эффективные операции вставки и удаления в любом месте контейнера, но не обеспечивает произвольный доступ по индексу.
- array — массив фиксированного размера, который предоставляет быстрый доступ к элементам, но не может изменять свой размер после создания.

10. Приведите пример кодя для создания контейнеров list, array, vector.

#include <iostream>
#include <vector>
#include <list>
#include <array>

int main() 
{
    // Создание vector для хранения целых чисел
    std::vector<int> vec = {1, 2, 3, 4, 5};
    
    // Создание list для хранения строк
    std::list<std::string> lst = {"Hello", "STL", "World"};
    
    // Создание array для хранения трёх целых чисел
    std::array<int, 3> arr = {10, 20, 30};
    
    // Вывод элементов vector
    for (const auto& v : vec)
        std::cout << v << " ";
    std::cout << std::endl;

    // Вывод элементов list
    for (const auto& l : lst)
        std::cout << l << " ";
    std::cout << std::endl;

    // Вывод элементов array
    for (const auto& a : arr)
        std::cout << a << " ";
    std::cout << std::endl;

    return 0;
}