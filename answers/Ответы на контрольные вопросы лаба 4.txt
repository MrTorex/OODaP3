1. Назовите аналоги библиотеки STL в других языках программирования. Назовите 4 основные составляющие библиотеки STL?

Аналогами библиотеки STL в других языках программирования являются:
- Java: Коллекции (например, HashMap, TreeMap, HashSet, TreeSet).
- Python: Структуры данных, такие как dict, set, OrderedDict, frozenset.
- C#: Коллекции (например, Dictionary, HashSet, SortedSet).
- JavaScript: Объекты и карты (например, Map, Set).

Четыре основные составляющие библиотеки STL:
- Алгоритмы — набор универсальных функций, которые работают с контейнерами (например, sort(), find(), copy()).
- Контейнеры — структуры данных для хранения элементов (например, vector, list, map, set).
- Итераторы — объекты, которые используются для доступа к элементам контейнеров.
- Функторы (функциональные объекты) — объекты, которые могут вести себя как функции (например, для сравнения - элементов).

2. Что такое шаблонный класс?

Шаблонный класс — это класс, который параметризован одним или несколькими типами данных. Это позволяет создавать обобщённые классы, которые могут работать с любыми типами данных, обеспечивая высокую степень повторного использования кода. Например, класс map<Key, Value> может работать как с типами int, float, так и с пользовательскими типами, такими как структуры или объекты.

Пример шаблонного класса:
template <typename T>
class Box {
   T value;
public:
   Box(T val) : value(val) {}
   T getValue() { return value; }
};

3. Зачем необходима STL, когда мы можем выполнять все операции, используя пользовательские структуры данных и функции для их обработки?

STL предоставляет готовые, отлаженные, высокоэффективные и стандартные структуры данных и алгоритмы, что позволяет:
- Сэкономить время на разработку и тестирование собственных реализаций.
- Использовать оптимизированные решения для типичных задач (поиск, сортировка и т.д.).
- Гарантировать переносимость и совместимость кода благодаря стандартным интерфейсам и поведению.
- Повысить читаемость и поддерживаемость кода за счет использования стандартных решений.
- STL помогает сосредоточиться на логике программы, а не на реализации низкоуровневых структур данных.

4. Каковы сходства и различия между итератором и указателем? Приведите пример объявления указателя и итератора.

Сходства:
- Итераторы и указатели позволяют перебирать элементы контейнера.
- Они поддерживают операции разыменования (*) для получения значения и перемещения (++/--).

Различия:
- Итераторы могут работать с контейнерами, для которых указатели не применимы (например, списки).
- Указатели являются низкоуровневыми объектами, ссылающимися на физическую память, тогда как итераторы работают на уровне логики контейнера и могут быть более безопасными в использовании.
- Итераторы имеют более широкий функционал, адаптированный для различных контейнеров STL.

Пример объявления указателя:
int arr[] = {1, 2, 3};
int* ptr = arr;  // указатель на первый элемент массива

Пример объявления итератора:
std::vector<int> vec = {1, 2, 3};
std::vector<int>::iterator it = vec.begin();  // итератор на первый элемент вектора

5. Для чего используются методы lower_bound() и upper_bound()? В чем между ними различия?

lower_bound(key) возвращает итератор на первый элемент, который не меньше заданного ключа key (то есть >= key).
upper_bound(key) возвращает итератор на первый элемент, который больше заданного ключа key (то есть > key).

Различия:
- lower_bound() может вернуть элемент, равный key, если такой существует.
- upper_bound() всегда возвращает элемент строго больше key.

Пример использования:
std::set<int> s = {1, 3, 5, 7};
auto it1 = s.lower_bound(5);  // it1 указывает на 5
auto it2 = s.upper_bound(5);  // it2 указывает на 7

6. Что собой представляет «пара» в библиотеке STL? Опишите различные методы создания «пары» для вставки её в контейнер STL.

Пара (pair) — это шаблонный класс STL, который объединяет два значения разных типов в одну структуру. Элемент first хранит первое значение (обычно ключ), а элемент second — второе (значение, ассоциированное с ключом).

Создание пары:
- Явное создание через конструктор:
std::pair<int, std::string> p(1, "apple");
- Использование функции make_pair(), которая автоматически определяет типы:
auto p = std::make_pair(1, "apple");
- Пример вставки пары в контейнер map:
std::map<int, std::string> m;
m.insert(std::make_pair(1, "apple"));

7. Кратко опишите свойства, особенности и различия контейнеров map, set.

map — хранит пары "ключ-значение". Ключи уникальны, и элементы автоматически сортируются по ключам. Позволяет быстрый поиск, добавление и удаление по ключу.
set — хранит только уникальные ключи, без значений. Элементы автоматически сортируются. Можно использовать для проверки наличия элемента, например, чтобы игнорировать повторяющиеся данные.

Различия:
- В map каждому ключу сопоставляется значение, а в set хранятся только ключи.
- Операции доступа к элементам в map происходят по ключу, а в set элементы сами по себе являются ключами.

8.Кратко опишите свойства, особенности и различия контейнеров multimap, multiset.

multimap — это версия map, которая позволяет нескольким элементам иметь один и тот же ключ.
multiset — это версия set, которая допускает хранение дублирующихся элементов.

Различия:
- В multimap можно хранить несколько значений для одного и того же ключа.
- В multiset можно хранить несколько одинаковых ключей.

9. Кратко опишите свойства, особенности и различия контейнеров unordered_map, unordered_set.

unordered_map — контейнер, который хранит пары "ключ-значение", но без упорядочивания. Для быстрого доступа к элементам используется хеш-функция.
unordered_set — контейнер, который хранит уникальные элементы (ключи), но также без упорядочивания. Использует хеш-функцию для организации данных.

Различия:
- В unordered_map каждый ключ ассоциирован со значением, а в unordered_set хранятся только ключи.
- В обоих контейнерах элементы не упорядочены, а доступны через хеш-функцию, что обеспечивает быструю вставку и поиск.

10. Кратко опишите свойства, особенности и различия контейнеров unordered_multimap, unordered_multiset.

unordered_multimap — версия unordered_map, допускающая несколько элементов с одинаковыми ключами. Использует хеш-функцию для доступа.
unordered_multiset — версия unordered_set, которая позволяет хранить дубликаты ключей, также используя хеш-функцию.

Различия:
- Оба контейнера не упорядочены и используют хеширование, но в unordered_multimap можно хранить несколько значений для одного ключа, а в unordered_multiset можно хранить несколько одинаковых ключей.